var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
(function () {
    /**
     * Define the message queue - it has to be done like this,
     * because script from another origin can't post messages.
     */
    var messages = [];
    setInterval(function () {
        messages.forEach(function (message) {
            window.parent.postMessage(message, '*');
        });
        messages.length = 0;
    }, 100);
    function queueMessage(type, data) {
        messages.push(__assign({ type: type }, data));
    }
    /**
     * Handle general errors that are not being logged using the console
     */
    window.addEventListener('error', function () {
        queueMessage('error');
    });
    /**
     * Monkey patch console methods so that they send a message to the parent
     */
    ['error', 'warn', 'log'].forEach(function (method) {
        var original = console[method];
        console[method] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            queueMessage('log', { method: method });
            original.apply(console, args);
        };
    });
    /**
     * Set up switching the solution to the one sent from the parent
     */
    var solutionContainer = document.getElementById('solution');
    var hasReceivedSolution = false;
    var loading = false;
    var solutionPending = false;
    var lastSolution;
    function initSolutionLoading() {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (loading) {
                            solutionPending = true;
                            return [2 /*return*/];
                        }
                        loading = true;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        if (!!hasReceivedSolution) return [3 /*break*/, 3];
                        return [4 /*yield*/, importMain()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [4 /*yield*/, reloadSolution()];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _a.sent();
                        console.error(error_1);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/, handleLoadFinish()];
                }
            });
        });
    }
    function importMain() {
        hasReceivedSolution = true;
        return System.import('./main.js');
    }
    function reloadSolution() {
        solutionContainer.textContent = lastSolution;
        return System.reload('./solution');
    }
    function handleLoadFinish() {
        loading = false;
        queueMessage('solutionLoaded');
        if (solutionPending) {
            solutionPending = false;
            return initSolutionLoading();
        }
    }
    window.addEventListener('message', function (_a) {
        var data = _a.data;
        lastSolution = data.solution;
        initSolutionLoading();
    });
    /**
     * The iframe content is loaded at this point
     */
    queueMessage('loaded');
})();
